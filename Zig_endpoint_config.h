// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG


// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (1)


// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Commissioning,extended pan id */, \
0x07, 0xFF, 0xF8, 0x00 /* 8,Default value: Commissioning,channel mask */, \
  }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Commissioning,extended pan id */, \
0x00, 0xF8, 0xFF, 0x07 /* 8,Default value: Commissioning,channel mask */, \
  }
#endif // BIGENDIAN_CPU




// Generated attributes
#define GENERATED_ATTRIBUTES { \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x03 } }, /* 0 / Basic / ZCL version*/\
    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00 } }, /* 1 / Basic / power source*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 2 / Basic / cluster revision*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0xFFFF } }, /* 3 / Commissioning / short address*/\
    { 0x0001, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)&(generatedDefaults[0]) } }, /* 4 / Commissioning / extended pan id*/\
    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0xFFFF } }, /* 5 / Commissioning / pan id*/\
    { 0x0003, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)&(generatedDefaults[8]) } }, /* 6 / Commissioning / channel mask*/\
    { 0x0004, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x02 } }, /* 7 / Commissioning / protocol version*/\
    { 0x0005, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x02 } }, /* 8 / Commissioning / stack profile*/\
    { 0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x03 } }, /* 9 / Commissioning / startup control*/\
    { 0x0010, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 10 / Commissioning / trust center address*/\
    { 0x0012, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 11 / Commissioning / network key*/\
    { 0x0013, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x01 } }, /* 12 / Commissioning / use insecure join*/\
    { 0x0014, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 13 / Commissioning / preconfigured link key*/\
    { 0x0015, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 14 / Commissioning / network key sequence number*/\
    { 0x0016, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x05 } }, /* 15 / Commissioning / network key type*/\
    { 0x0017, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000 } }, /* 16 / Commissioning / network manager address*/\
    { 0x0020, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x05 } }, /* 17 / Commissioning / scan attempts*/\
    { 0x0021, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0064 } }, /* 18 / Commissioning / time between scans*/\
    { 0x0022, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x003C } }, /* 19 / Commissioning / rejoin interval*/\
    { 0x0023, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0E10 } }, /* 20 / Commissioning / max rejoin interval*/\
    { 0x0030, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000UL } }, /* 21 / Commissioning / indirect poll rate*/\
    { 0x0031, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00UL } }, /* 22 / Commissioning / parent retry threshold*/\
    { 0x0040, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 23 / Commissioning / concentrator flag*/\
    { 0x0041, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0F } }, /* 24 / Commissioning / concentrator radius*/\
    { 0x0042, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 25 / Commissioning / concentrator discovery time*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 26 / Commissioning / cluster revision*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001 } }, /* 27 / Price / cluster revision*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001 } }, /* 28 / Simple Metering / cluster revision*/\
    { 0x0000, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0000 } }, /* 29 / Key Establishment / key establishment suite (client)*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 30 / Key Establishment / cluster revision*/\
    { 0x0000, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0000 } }, /* 31 / Key Establishment / key establishment suite (server)*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 32 / Key Establishment / cluster revision*/\
  }


// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS \
const EmberAfGenericClusterFunction emberAfFuncArrayPriceClusterClient[] = { (EmberAfGenericClusterFunction)emberAfPriceClusterClientInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArraySimpleMeteringClusterClient[] = { (EmberAfGenericClusterFunction)emberAfSimpleMeteringClusterClientDefaultResponseCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterClient[] = { (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientAttributeChangedCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientDefaultResponseCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientMessageSentCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterServer[] = { (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerAttributeChangedCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerDefaultResponseCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerMessageSentCallback,(EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback}; \


// Clusters definitions
#define GENERATED_CLUSTERS { \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 3, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0015, (EmberAfAttributeMetadata*)&(generatedAttributes[3]), 24, 79, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0700, (EmberAfAttributeMetadata*)&(generatedAttributes[27]), 1, 2, (CLUSTER_MASK_CLIENT| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayPriceClusterClient, },    \
    { 0x0702, (EmberAfAttributeMetadata*)&(generatedAttributes[28]), 1, 2, (CLUSTER_MASK_CLIENT| CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION), emberAfFuncArraySimpleMeteringClusterClient, },    \
    { 0x0800, (EmberAfAttributeMetadata*)&(generatedAttributes[29]), 2, 0, (CLUSTER_MASK_CLIENT| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION| CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION| CLUSTER_MASK_MESSAGE_SENT_FUNCTION| CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayKeyEstablishmentClusterClient, },    \
    { 0x0800, (EmberAfAttributeMetadata*)&(generatedAttributes[31]), 2, 0, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION| CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION| CLUSTER_MASK_MESSAGE_SENT_FUNCTION| CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayKeyEstablishmentClusterServer, },    \
  }


// Endpoint types
#define GENERATED_ENDPOINT_TYPES {        \
    { (EmberAfCluster*)&(generatedClusters[0]), 6, 83 }, \
  }


// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)


// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (16)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (12)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 83

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY { 1 }

// Array of profile ids
#define FIXED_PROFILE_IDS { 265 }

// Array of device ids
#define FIXED_DEVICE_IDS { 1282 }

// Array of device versions
#define FIXED_DEVICE_VERSIONS { 1 }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { 0 }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { 0 }


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginNetworkFindInitCallback(void); \
  void emberAfPluginCountersInitCallback(void); \
  void emberAfPluginEsiManagementInitCallback(void); \


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
  emberAfPluginNetworkFindInitCallback(); \
  emberAfPluginCountersInitCallback(); \
  emberAfPluginEsiManagementInitCallback(); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginNcpConfigurationNcpInitCallback(bool memoryAllocation); \
  void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
  emberAfPluginNcpConfigurationNcpInitCallback(memoryAllocation); \
  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \
  void emberAfPluginNetworkSteeringStackStatusCallback(EmberStatus status); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
  emberAfPluginNetworkFindStackStatusCallback(status); \
  emberAfPluginNetworkSteeringStackStatusCallback(status); \


// Generated data for the command discovery
#define GENERATED_COMMANDS { \
    { 0x0015, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / RestartDeviceResponse */ \
    { 0x0015, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / SaveStartupParametersResponse */ \
    { 0x0015, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / RestoreStartupParametersResponse */ \
    { 0x0015, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / ResetStartupParametersResponse */ \
    { 0x0700, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* Price / GetCurrentPrice */ \
    { 0x0700, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishPrice */ \
    { 0x0700, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishBlockPeriod */ \
    { 0x0700, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* Price / PriceAcknowledgement */ \
    { 0x0700, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishConversionFactor */ \
    { 0x0700, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCalorificValue */ \
    { 0x0700, 0x04, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishTariffInformation */ \
    { 0x0700, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishBlockThresholds */ \
    { 0x0700, 0x07, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCO2Value */ \
    { 0x0700, 0x08, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishTierLabels */ \
    { 0x0700, 0x09, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishBillingPeriod */ \
    { 0x0700, 0x0A, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishConsolidatedBill */ \
    { 0x0700, 0x0B, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCppEvent */ \
    { 0x0700, 0x0C, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCreditPayment */ \
    { 0x0700, 0x0D, COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishCurrencyConversion */ \
    { 0x0700, 0x0E, COMMAND_MASK_INCOMING_CLIENT }, /* Price / CancelTariff */ \
    { 0x0702, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / GetProfileResponse */ \
    { 0x0702, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / RequestMirror */ \
    { 0x0702, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / RemoveMirror */ \
    { 0x0702, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / RequestFastPollModeResponse */ \
    { 0x0702, 0x0C, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / SupplyStatusResponse */ \
    { 0x0800, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / InitiateKeyEstablishmentRequest */ \
    { 0x0800, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / InitiateKeyEstablishmentResponse */ \
    { 0x0800, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / EphemeralDataRequest */ \
    { 0x0800, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / EphemeralDataResponse */ \
    { 0x0800, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / ConfirmKeyDataRequest */ \
    { 0x0800, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / ConfirmKeyDataResponse */ \
    { 0x0800, 0x03, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / TerminateKeyEstablishment */ \
  }
#define EMBER_AF_GENERATED_COMMAND_COUNT (32)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)


// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS {\
}
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (0)
#endif // SILABS_AF_ENDPOINT_CONFIG
